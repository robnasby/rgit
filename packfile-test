#! /usr/bin/ruby

# Much of the code below is based on the article 'Reimplementing “git clone” in Haskell from the bottom up'
# (http://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/) and the accompanying
# BitBucket repository (https://bitbucket.org/ssaasen/git-in-haskell-from-the-bottom-up), specifically the
# files Packfile.hs and Delta.hs at commit 8f8175441cf663ecc04f455975c38fc4a04d32ed.


class PackFileTester

  def run(arguments)

    pack_file_path = arguments[0]
    pack_file = File.open(pack_file_path)

    total_objects = read_file_header(pack_file)
    object_type = read_object_header(pack_file)

  end

  def read_file_header(pack_file)

    pack_file.seek(0)
    file_header = pack_file.read(12)

    magic = file_header.slice(0..3)
    version = file_header.slice(4..7).unpack('L>')[0]
    object_count = file_header.slice(8..11).unpack('L>')[0]

    object_count

  end

  def read_object_header(pack_file)

    byte = pack_file.read(1).unpack('C')[0]

    type_code = (byte & 0b01110000) >> 4
    type = pack_object_code_to_type(type_code)

    size = byte & 0b00001111
    shift = 4
    while (is_msb_set(byte))
      byte = pack_file.read(1).unpack('C')[0]
      size += ((byte & 0b01111111) << shift)
      shift += 7
    end

    type

  end

  def is_msb_set(byte)

    !(byte & 0b10000000).zero?

  end

  def pack_object_code_to_type(code)

    case code
      when 1 then :commit
      when 2 then :tree
      when 3 then :blob
      when 4 then :tag
      when 6 then :delta_ofs
      when 7 then :delta_ref
      else :unknown
    end

  end

end

PackFileTester.new.run(ARGV)
